; -*- Mode: Lisp; Mode: StumpWM; -*-
; .stumpwmrc

(in-package :stumpwm)

(setq *startup-message* nil)

(loop for file in '("battery" "notifications")
      do (load (make-pathname :name file :type "lisp" :directory
                              '(:relative ".stumpwm.d" "contrib"))))

(load (data-dir-file "system-monitor" "lisp"))

; --- system monitoring  ----------------------------------------
(defvar sysmon-timer nil)
(defvar mode-line-updater nil)

(when sysmon-timer
  (cancel-timer sysmon-timer)
  (setq sysmon-timer nil))
(setq sysmon-timer
      (run-with-timer 0 1 'sysmon:update-system-info))

(defcommand nop () () 0) ;; dummy command
(when mode-line-updater
  (cancel-timer mode-line-updater)
  (setq mode-line-updater nil))
(setq mode-line-updater
      (run-with-timer 0 1.5 'stumpwm:run-commands "nop"))

; --- process management ----------------------------------------
(defun ps-exists (ps)
  (let ((f "ps -ef | grep ~S | grep -v -e grep -e stumpish | wc -l"))
    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))

(defun start-uniq-command-ps (command &key op (bg t))
  (unless (ps-exists command)
    (run-shell-command
     (concat command " " (or op "") " " (if bg "&" "")))))

(defun kill-ps-command (command)
  (format nil "kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`"
          command))

(defun kill-ps (command)
  (run-shell-command (kill-ps-command command)))

; --- run shell commands  ---------------------------------------

(defun run-or-raise-emacs ()
  (run-or-raise "emacs" '(:class "Emacs")))

(run-shell-command "xsetroot -solid black")
(start-uniq-command-ps "nm-applet" :op "--sm-disable")
(start-uniq-command-ps "gnome-settings-daemon")
(start-uniq-command-ps "gnome-power-manager")
(start-uniq-command-ps "gnome-valume-manager")
(start-uniq-command-ps "update-notifier")
(run-or-raise-emacs)

; --- shell command definitions  --------------------------------
(define-stumpwm-type :password (input prompt)
  (let ((history *input-history*)
        (arg (argument-pop input))
        (fn (symbol-function 'draw-input-bucket)))
    (unless arg
      (unwind-protect
           (setf (symbol-function 'draw-input-bucket)
                 (lambda (screen prompt input &optional errorp)
                   (let ((i (copy-structure input)))
                     (setf (input-line-string i)
                           (make-string (length (input-line-string i))
                                        :initial-element #\*))
                     (funcall fn screen prompt i)))
                 arg (read-one-line (current-screen) prompt))
        (setf (symbol-function 'draw-input-bucket) fn
              *input-history* history))
      arg)))

(defmacro define-sudo-command (name command &key output)
  (let ((cmd (gensym)))
    `(defcommand ,name (password) ((:password "sudo password: "))
      (let ((,cmd (concat "echo '" password "' | sudo -S " ,command)))
        ,(if output
             `(run-prog-collect-output *shell-program* "-c" ,cmd)
             `(run-prog *shell-program* :args (list "-c" ,cmd) :wait nil))))))

(define-sudo-command on-emobile
  (concat "pon em"
          (when (ps-exists "Network")
            (concat "&& sudo " (kill-ps-command "Network"))))
  :output t)

(define-sudo-command off-emobile "poff em" :output t)
(define-sudo-command reboot "reboot")
(define-sudo-command shutdown "shutdown -h now")
(define-sudo-command backup "~/src/backup/backup.sh")
(define-sudo-command apache-start "/etc/init.d/apache2 start")
(define-sudo-command apache-stop  "/etc/init.d/apache2 stop")

; --- stumpwm command definitions -------------------------------
(defmacro def-run-or-raise-command (cmd prop)
  (let ((cmd-str (string-downcase (symbol-name cmd))))
    `(defcommand ,cmd () ()
       (run-or-raise ,cmd-str ,prop))))

(def-run-or-raise-command gnome-terminal '(:class "Gnome-terminal"))
;(def-run-or-raise-command mlterm '(:class "mlterm"))
;(def-run-or-raise-command urxvt '(:class "URxvt"))
(def-run-or-raise-command firefox '(:class "Firefox"))
(def-run-or-raise-command soffice '(:class "soffice"))
(def-run-or-raise-command virtualbox '(:class "VirtualBox"))

(defcommand show-battery () ()
  (echo-string (current-screen) (run-shell-command "acpi" t)))

(defcommand uptime () ()
  (echo-string (current-screen) (run-shell-command "uptime" t)))

(defcommand gnome-panel () ()
  (if (ps-exists "gnome-panel")
    (progn (kill-ps "gnome-panel")
           (sleep 0.3)
           (run-shell-command "stumpish mode-line"))
    (progn (when (head-mode-line (current-head))
             (mode-line))
           (run-shell-command "gnome-panel"))))

(defcommand emacs () ()
  (run-or-raise-emacs))

; --- key bindings -----------------------------------------------
(set-prefix-key (kbd "C-,"))
(define-key *root-map*   (kbd "s")   "colon exec firefox http://")
(define-key *root-map*   (kbd "*")   "show-battery")
(define-key *root-map*   (kbd "w")   "windowlist")
(define-key *root-map*   (kbd "c")   "gnome-terminal")
(define-key *root-map*   (kbd "e")   "emacs")
(define-key *root-map*   (kbd "b")   "firefox")
(define-key *root-map*   (kbd "C-o") "soffice")
(define-key *root-map*   (kbd "v")   "virtualbox")
(define-key *root-map*   (kbd "N")   '*notifications-map*)
; emacs style
(define-key *root-map*   (kbd "0")   "remove")
(define-key *root-map*   (kbd "1")   "only")
(define-key *root-map*   (kbd "2")   "vsplit")
(define-key *root-map*   (kbd "3")   "hsplit")
(define-key *input-map*  (kbd "C-m") 'input-submit)
(define-key *input-map*  (kbd "C-h") 'input-delete-backward-char)
(define-key *input-map*  (kbd "M-p") 'input-history-back)
(define-key *input-map*  (kbd "M-n") 'input-history-forward)
(define-key *resize-map* (kbd "C-m") "exit-iresize")

; --- mode line -------------------------------------------------
(setf *mode-line-screen-position* :top)
(setf *mode-line-frame-position* :top)
(setf *mode-line-border-width* 1)
(setf *mode-line-pad-x* 6)
(setf *mode-line-pad-y* 0)
(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "wheat")
(setf *mode-line-border-color* "dark grey")

(setq mode-line-format-without-sysmon
      (list "^03%N^n "
            '(:eval (run-shell-command
                     "LANG=c; date '+%m/%d(%a)_%H:%M'|tr -d [:cntrl:]" t))
            " | %g"
	    ))
(setq mode-line-format-with-sysmon
      (concatenate
       'list
       mode-line-format-without-sysmon
       (list
	"
"
	"^03%N^n "
	'(:eval
	  (let ((cpu-usage (sysmon:get-cpu-usage))
		(memory-usage (sysmon:get-memory-usage)))
	    (format nil "cpu:~4,1,2,,F(u:~4,1,2,,F s:~4,1,2,,F io:~4,1,2,,F), mem:~4,1,2,,F(~4,1,2,,F$)"
		    (getf cpu-usage :total)
		    (getf cpu-usage :user)
		    (getf cpu-usage :system)
		    (getf cpu-usage :iowait 0)
		    (getf memory-usage :used)
		    (getf memory-usage :cached))))
	)))
(setf *screen-mode-line-format*
      mode-line-format-with-sysmon)
(defcommand sysmon () ()
	    (setf *screen-mode-line-format*
		  (if (equal *screen-mode-line-format*
			     mode-line-format-with-sysmon)
		      mode-line-format-without-sysmon
		      mode-line-format-with-sysmon)))

(sysmon:get-memory-usage)

(unless (head-mode-line (current-head))
  (mode-line))

